!SESSION 2017-01-05 11:47:36.286 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 11:48:52.999
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.recommenders.rcp 2 12 2017-01-05 14:08:33.047
!MESSAGE Failed to parse news feed
!STACK 0
java.net.UnknownHostException: www.codetrails.com
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
	at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
	at java.net.InetAddress.getAllByName0(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
	at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:102)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:319)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
	at org.apache.http.client.fluent.Executor.execute(Executor.java:206)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.download(CheckForProjectNewsJob.java:128)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.doRun(CheckForProjectNewsJob.java:92)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.run(CheckForProjectNewsJob.java:65)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:23.596
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: 313 (Exception during 'super' constructor evaluation). JPanel() {} java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getWriteMethod(Unknown Source)
!STACK 0
org.eclipse.wb.internal.core.utils.exception.DesignerException: 313 (Exception during 'super' constructor evaluation). JPanel() {} java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getWriteMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.creation.ThisCreationSupport.create(ThisCreationSupport.java:275)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateJavaInfoUsingCreationSupport(JavaInfoEvaluationHelper.java:642)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.addJavaInfo(JavaInfoParser.java:1261)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:253)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.UndoManager.activate(UndoManager.java:90)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState_True(DesignPage.java:263)
	at org.eclipse.wb.internal.core.editor.DesignPage.handleActiveState(DesignPage.java:241)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode.showPage(DefaultMultiMode.java:125)
	at org.eclipse.wb.internal.core.editor.multi.DefaultMultiMode$1.widgetSelected(DefaultMultiMode.java:63)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1085)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1070)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:782)
	at org.eclipse.swt.custom.CTabFolder.setSelection(CTabFolder.java:3110)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1794)
	at org.eclipse.swt.custom.CTabFolder$1.handleEvent(CTabFolder.java:283)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getWriteMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildred_Method(JavaInfoUtils.java:447)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildren(JavaInfoUtils.java:429)
	at org.eclipse.wb.internal.swing.model.component.ComponentInfo.createExposedChildren(ComponentInfo.java:109)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.createExposedChildren(ContainerInfo.java:143)
	at org.eclipse.wb.core.model.JavaInfo.initialize(JavaInfo.java:423)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.initialize(ContainerInfo.java:114)
	at org.eclipse.wb.core.model.JavaInfo.setObject(JavaInfo.java:1288)
	at org.eclipse.wb.internal.core.model.creation.ThisCreationSupport.create(ThisCreationSupport.java:269)
	... 62 more

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:26.450
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: 313 (Exception during 'super' constructor evaluation). JPanel() {} java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getReadMethod(Unknown Source)
!STACK 0
org.eclipse.wb.internal.core.utils.exception.DesignerException: 313 (Exception during 'super' constructor evaluation). JPanel() {} java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getReadMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.creation.ThisCreationSupport.create(ThisCreationSupport.java:275)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateJavaInfoUsingCreationSupport(JavaInfoEvaluationHelper.java:642)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.addJavaInfo(JavaInfoParser.java:1261)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:253)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getReadMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildred_Method(JavaInfoUtils.java:449)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildren(JavaInfoUtils.java:429)
	at org.eclipse.wb.internal.swing.model.component.ComponentInfo.createExposedChildren(ComponentInfo.java:109)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.createExposedChildren(ContainerInfo.java:143)
	at org.eclipse.wb.core.model.JavaInfo.initialize(JavaInfo.java:423)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.initialize(ContainerInfo.java:114)
	at org.eclipse.wb.core.model.JavaInfo.setObject(JavaInfo.java:1288)
	at org.eclipse.wb.internal.core.model.creation.ThisCreationSupport.create(ThisCreationSupport.java:269)
	... 53 more

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:26.653
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JLabel("Your Book List To Review")
!STACK 0
java.lang.Error: new JLabel("Your Book List To Review")
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.VariableDeclarationFragment.accept0(VariableDeclarationFragment.java:263)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.VariableDeclarationStatement.accept0(VariableDeclarationStatement.java:267)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getWriteMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildred_Method(JavaInfoUtils.java:447)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildren(JavaInfoUtils.java:429)
	at org.eclipse.wb.internal.swing.model.component.ComponentInfo.createExposedChildren(ComponentInfo.java:109)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.createExposedChildren(ContainerInfo.java:143)
	at org.eclipse.wb.core.model.JavaInfo.initialize(JavaInfo.java:423)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.initialize(ContainerInfo.java:114)
	at org.eclipse.wb.core.model.JavaInfo.setObject(JavaInfo.java:1288)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper$3.evaluationSuccessful(JavaInfoEvaluationHelper.java:271)
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate0(AstEvaluationEngine.java:179)
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:61)
	... 78 more

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:27.396
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JLabel("Your Book List To Review")
!STACK 0
java.lang.Error: new JLabel("Your Book List To Review")
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.VariableDeclarationFragment.accept0(VariableDeclarationFragment.java:263)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.VariableDeclarationStatement.accept0(VariableDeclarationStatement.java:267)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException
	at java.beans.MethodRef.get(Unknown Source)
	at java.beans.PropertyDescriptor.getReadMethod(Unknown Source)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildred_Method(JavaInfoUtils.java:449)
	at org.eclipse.wb.internal.core.model.JavaInfoUtils.addExposedChildren(JavaInfoUtils.java:429)
	at org.eclipse.wb.internal.swing.model.component.ComponentInfo.createExposedChildren(ComponentInfo.java:109)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.createExposedChildren(ContainerInfo.java:143)
	at org.eclipse.wb.core.model.JavaInfo.initialize(JavaInfo.java:423)
	at org.eclipse.wb.internal.swing.model.component.ContainerInfo.initialize(ContainerInfo.java:114)
	at org.eclipse.wb.core.model.JavaInfo.setObject(JavaInfo.java:1288)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper$3.evaluationSuccessful(JavaInfoEvaluationHelper.java:271)
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate0(AstEvaluationEngine.java:179)
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:61)
	... 78 more

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:28.380
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JScrollPane()
!STACK 0
java.lang.Error: new JScrollPane()
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.VariableDeclarationFragment.accept0(VariableDeclarationFragment.java:263)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.VariableDeclarationStatement.accept0(VariableDeclarationStatement.java:267)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:29.130
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JScrollPane()
!STACK 0
java.lang.Error: new JScrollPane()
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.VariableDeclarationFragment.accept0(VariableDeclarationFragment.java:263)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.VariableDeclarationStatement.accept0(VariableDeclarationStatement.java:267)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:29.443
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JList()
!STACK 0
java.lang.Error: new JList()
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.Assignment.accept0(Assignment.java:313)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.ExpressionStatement.accept0(ExpressionStatement.java:145)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException

!ENTRY org.eclipse.wb.core 4 4 2017-01-05 18:43:30.177
!MESSAGE Designer [1.7.0.r44x201405021531.201701051843]: new JList()
!STACK 0
java.lang.Error: new JList()
	at org.eclipse.wb.core.eval.AstEvaluationEngine.evaluate(AstEvaluationEngine.java:71)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluateExpression(JavaInfoEvaluationHelper.java:630)
	at org.eclipse.wb.internal.core.model.JavaInfoEvaluationHelper.evaluate(JavaInfoEvaluationHelper.java:502)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.evaluateNode(JavaInfoParser.java:1309)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$1(JavaInfoParser.java:1300)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor$3.run(JavaInfoParser.java:602)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runRethrow(ExecutionUtils.java:119)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$ExecutionFlowParseVisitor.postVisit(JavaInfoParser.java:592)
	at sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils$1.intercept(ExecutionFlowUtils.java:399)
	at org.eclipse.jdt.core.dom.ASTVisitor$$EnhancerByCGLIB$$1af51f44.postVisit(<generated>)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2714)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.Assignment.accept0(Assignment.java:313)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChild(ASTNode.java:2759)
	at org.eclipse.jdt.core.dom.ExpressionStatement.accept0(ExpressionStatement.java:145)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:354)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement0(ExecutionFlowUtils.java:336)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visitStatement(ExecutionFlowUtils.java:315)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:247)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:228)
	at org.eclipse.wb.core.eval.ExecutionFlowUtils.visit(ExecutionFlowUtils.java:191)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parseRootMethods(JavaInfoParser.java:312)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:268)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.access$9(JavaInfoParser.java:238)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:153)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser$1.runObject(JavaInfoParser.java:1)
	at org.eclipse.wb.internal.core.utils.execution.ExecutionUtils.runDesignTime(ExecutionUtils.java:159)
	at org.eclipse.wb.internal.core.parser.JavaInfoParser.parse(JavaInfoParser.java:151)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:534)
	at org.eclipse.wb.internal.core.editor.DesignPage.access$9(DesignPage.java:522)
	at org.eclipse.wb.internal.core.editor.DesignPage$8$1.run(DesignPage.java:449)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:187)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:156)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4734)
	at org.eclipse.wb.internal.core.editor.DesignPage$8.run(DesignPage.java:446)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:466)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:374)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:527)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF_withProgress(DesignPage.java:465)
	at org.eclipse.wb.internal.core.editor.DesignPage.internal_refreshGEF(DesignPage.java:415)
	at org.eclipse.wb.internal.core.editor.UndoManager.refreshDesignerEditor(UndoManager.java:381)
	at org.eclipse.wb.internal.core.editor.DesignPage.refreshGEF(DesignPage.java:392)
	at org.eclipse.wb.internal.core.editor.actions.RefreshAction.run(RefreshAction.java:46)
	at org.eclipse.wb.internal.core.editor.actions.DesignPageAction.run(DesignPageAction.java:34)
	at org.eclipse.wb.internal.core.editor.errors.JavaExceptionComposite.doRefresh(JavaExceptionComposite.java:87)
	at org.eclipse.wb.internal.core.editor.errors.ExceptionComposite$3.widgetSelected(ExceptionComposite.java:129)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4353)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4172)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3761)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:148)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:636)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:579)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:135)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.NullPointerException
!SESSION 2017-01-05 18:59:12.367 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 19:00:18.584
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 19:21:08.740 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 19:21:22.766
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 19:24:23.593 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 19:24:36.850
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 22:21:50.320 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2017-01-05 22:21:54.507
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 22:22:02.211
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 23:16:19.958 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2017-01-05 23:16:24.728
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 23:16:33.033
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 23:22:41.024 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 23:22:53.035
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 23:27:38.026 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 23:27:49.556
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 23:37:59.691 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 23:38:11.655
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-05 23:43:54.367 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-05 23:44:04.563
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 00:00:12.750 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 00:00:24.589
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 08:34:35.303 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 08:35:08.789
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 08:47:07.961 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 08:47:23.196
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 08:48:58.634 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 08:49:08.642
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 08:53:15.358 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 08:53:26.143
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 09:09:16.871 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 09:09:33.697
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 09:11:33.103 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 09:12:01.743
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 09:14:25.158 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 09:14:35.696
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 09:19:40.612 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 09:20:11.386
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 09:29:10.560 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 09:29:22.845
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 10:28:25.240 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2017-01-06 10:28:28.834
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 10:28:37.339
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 10:31:28.025 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 10:31:38.833
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 10:32:16.052 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 10:32:29.564
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 10:56:19.888 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 10:56:31.332
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-01-06 13:00:21.522 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 13:00:33.592
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:05:08.494
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:05:08.502
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:05:08.505
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:05:08.690
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:05:08.694
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:05:08.695
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:05:12.925
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:05:12.927
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:05:12.928
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:06:07.201
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:06:07.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:06:07.205
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:06:07.370
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:06:07.372
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:06:07.372
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 13:06:10.883
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private  BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			libraryManager_gui
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			//editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 13:06:10.885
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 13:06:10.886
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3335)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:438)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:327)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2167)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1780)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SESSION 2017-01-06 13:24:51.821 -----------------------------------------------
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_111
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=iw_IL
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-01-06 13:25:02.737
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Lenovo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:13:48.966
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(Integer.parseInt(user.getPrmission())==1)reader_gui.
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:13:48.966
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:13:48.970
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:13:49.034
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(Integer.parseInt(user.getPrmission())==1)reader_gui.
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:13:49.038
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:13:49.038
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:06.109
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:06.125
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:06.125
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:06.156
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:06.172
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:06.172
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:06.203
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:589)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:06.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:589)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:06.203
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:589)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:09.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:09.720
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:09.720
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:09.834
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:09.834
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:09.834
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:47.386
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:47.386
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:47.390
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:47.426
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:47.426
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:47.426
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:49.436
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:49.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:49.436
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:17:49.468
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:17:49.468
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:17:49.468
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:18:59.872
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)LibrarianGui.
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2017-01-06 18:18:59.872
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2017-01-06 18:18:59.872
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2017-01-06 18:18:59.919
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package gui;
import entity.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import Controllers.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;

public class mainFrame extends JFrame {
    private User user;
    private ArrayList<Book> books;
    private int selection=-1;
	private Signin_gui signin_gui ;
    private Login_gui login_gui;
    private ReaderGui reader_gui;
	private EditorGui editor_gui;
    private LibrarianGui librarian_gui;
    private LibraryManagerGui libraryManager_gui;
	private SearchBookGui searchBookGui;
    private BookListToReviewGui bookListToReviewGui;
	private SearchBookResultGui searchBookResultGui; 
	private BookDisplayGui bookDisplayGui;
	private NotificaitonWindowGui notificaitonWindowGui;
	private ReviwsForBookListGui reviewsForBookList;
	private ReviewDisplayGui reviewDisplayGui;
	private PaymentOptionGui paymentOptionsGui;
	private ChooseFormatGui chooseFormatGui;
	private WriteReviewGui writeReviewGui;
	private ReviewToCheckGui reviewToCheackGui;
	private ReviewCheackingGui reviewCheckingGui;
	private LibrarianBookDisplayGui librarianBookDisplayGui;
	private AddBookGui addBookGui;
	private PaymentRequestListGui paymantRequstListGui;
	private PaymentRequstDisplayGui paymentRequstDisplayGui;
	private SgininRequstListGui sgininRequsrtListGui;
	private SginInRequestDisplayGui sgininRequstDisplayGui;
	private AddAccuntGui addAccuntGui;
	private SearchAccuntGui searchAccuntGui;
	private EditAccuntGui editAccuntGui;
	private ManagerBookDisplayGui managerBookDisplayGui;
	private ManagerEditAccuntGui managerEditAccuntGui;
	private ReportManuGui reportManuGui;
	private ReportSearchBookGui reportSearchBookGui;
	private ReportSearchAccuntGui reportSearchAccuntGui;
	private ReportDisplayReaderGui reportDisplayReaderGui;
	private SearchBookResultGui reportSearchBookResultGui;
	private ReportBookDisplayGui reportBookDisplayGui;
	private About_us about_us;
	
	private int permmision=0;
	public mainFrame() {
		
		super();
		user=new User();
		books=new ArrayList<Book>();
		Checks check=new Checks();
		setSize(750,650);
		///////////status represnet 1-reader,2-editor,3-librerian,4-libarary mananger
		boolean mambership=false;///////////////////////////////////////////////////////for cheacking
		login_gui=new Login_gui();
		signin_gui=new Signin_gui();
		about_us=new About_us();
		reader_gui=new ReaderGui("Reader");
		editor_gui=new EditorGui("Editor");
		librarian_gui=new LibrarianGui("Librarian");
		libraryManager_gui=new LibraryManagerGui("Library Manager");
		searchBookGui=new SearchBookGui();
		bookListToReviewGui=new BookListToReviewGui();
		searchBookResultGui=new SearchBookResultGui();
		bookDisplayGui =new BookDisplayGui();
		notificaitonWindowGui=new NotificaitonWindowGui();
		reviewsForBookList = new ReviwsForBookListGui();
		reviewDisplayGui = new ReviewDisplayGui();
		paymentOptionsGui = new PaymentOptionGui();
		chooseFormatGui =new ChooseFormatGui();
		writeReviewGui=new WriteReviewGui();
		reviewToCheackGui= new ReviewToCheckGui();
		reviewCheckingGui =new ReviewCheackingGui();
		librarianBookDisplayGui= new LibrarianBookDisplayGui();
		addBookGui = new AddBookGui();
		paymantRequstListGui=new PaymentRequestListGui();
		paymentRequstDisplayGui= new PaymentRequstDisplayGui();
	    sgininRequsrtListGui =new SgininRequstListGui();
	    sgininRequstDisplayGui=new SginInRequestDisplayGui();
	    addAccuntGui= new AddAccuntGui();
	    searchAccuntGui=new SearchAccuntGui();
	    editAccuntGui=new EditAccuntGui();
	    managerBookDisplayGui=new ManagerBookDisplayGui();
	    managerEditAccuntGui=new ManagerEditAccuntGui();
	    reportManuGui=new ReportManuGui();
	    reportSearchBookGui= new ReportSearchBookGui();
	    reportSearchAccuntGui= new ReportSearchAccuntGui();
	    reportDisplayReaderGui=new ReportDisplayReaderGui();
	    reportSearchBookResultGui=new SearchBookResultGui();
	    reportBookDisplayGui=new ReportBookDisplayGui();
		add(login_gui); // place the first panel in the frame 
		add(signin_gui);
		
		
		searchBookResultGui.setVisible(false);
		signin_gui.setVisible(false);

		
		setTitle("Good Reading");
	   
		
		/////////////////////////////////////reader//////////////////////////////////
		
		/////// log in button////// 
		login_gui.loginButton.addActionListener(new ActionListener()
		{
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
			
				if(check.checkInputLogin(login_gui))
				{
					loginController login_con=new loginController(login_gui.IDtextPane.getText(), login_gui.passwordField.getText());
					permmision=Integer.parseInt(login_con.getUser().getPrmission());
					copyUser(login_con.getUser());
					openPanelByjob();
				}
				
			}
		});
		
		login_gui.singinButton.addActionListener(new ActionListener() 
		{
			
			
			@Override
			public void actionPerformed(ActionEvent e) 
			{
				// TODO Auto-generated method stub
				setSize(new Dimension(750, 650));
				login_gui.setVisible(false);
				signin_gui.setVisible(true);
			}
		} );	
		
		login_gui.btnAbout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(about_us);
				about_us.setVisible(true);
				login_gui.setVisible(false);
				
			}
		});
		
		//////////////////////////
		
		////////////////About us///////////////////
		
		about_us.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				about_us.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		//////////////////////////////////////////////
		
		//////// sign in button////////
		signin_gui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e)
			{
				//setContentPane(login_gui);
				setSize(new Dimension(450,450));
				signin_gui.setVisible(false);
				login_gui.setVisible(true);
			}
		});
		
		signin_gui.SendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				check.checkInputSignin(signin_gui);
				
			}
		});
		///////////////////////////
		
		/////// reader  button////////
		reader_gui.btnLogout.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			
				// change in db status of user
				LogoutController logoutController=new LogoutController(user.getId());
				login_gui.IDtextPane.setText("");
				login_gui.passwordField.setText("");
				setSize(new Dimension(450,450));
				login_gui.setVisible(true);
				reader_gui.setVisible(false);
				
			} 
		});
	
		reader_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				reader_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );

		reader_gui.btnWriteAReview.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
				books=writeReviewContoller.getBooksList();
				if(books.size()==0)
					JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
				else{
				add(bookListToReviewGui);
				bookListToReviewGui.setVisible(true);
				reader_gui.setVisible(false);
				DefaultListModel<String> model = new DefaultListModel<>();
				bookListToReviewGui.BookList.setModel(model);
				for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
				}
				
			
			}
		});
		reader_gui.NotificationButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(notificaitonWindowGui);
				notificaitonWindowGui.setVisible(true);
				reader_gui.setVisible(false);
				
			}
		});
		notificaitonWindowGui.btnBack.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				notificaitonWindowGui.setVisible(false);
				if(permmision==1){
				add(reader_gui);
				reader_gui.setVisible(true);}
				else if(permmision==2){
					add(editor_gui);
					editor_gui.setVisible(true);}
				else if(permmision==3){
					add(librarian_gui);
					librarian_gui.setVisible(true);}
				else{
					add(libraryManager_gui);
					libraryManager_gui.setVisible(true);
				}
				}
				
		});
		
			
		
		/////////////////////////////
		
		///////////// Book Search ////////////
		searchBookGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				searchBookGui.setVisible(false);
			}
		});
		
		searchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
		
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				
				
				if(check.check_serch_book(searchBookGui))
				{
					// go to db to search Book
					add(searchBookResultGui);
					searchBookResultGui.setVisible(true);
					searchBookGui.setVisible(false);
				}
			}
		});
        //////////////////////////////////////
		
        ///////////////write review///////////
		bookListToReviewGui.backButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)librarian_gui.setVisible(true);
				else libraryManager_gui.setVisible(true);
				
			}
		});
	
		bookListToReviewGui.OKbtnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				bookListToReviewGui.BookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				selection=bookListToReviewGui.BookList.getSelectedIndex();
				if(selection!=-1){
				// System.out.println("the choosen one "+books.get(selection));
				add(writeReviewGui);
				writeReviewGui.setVisible(true);
				bookListToReviewGui.setVisible(false);
				}
			    
			}
		});
	    writeReviewGui.btnBack.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookListToReviewGui);
				writeReviewGui.setVisible(false);
				bookListToReviewGui.setVisible(true);
				
			    
			}
		});
        writeReviewGui.btnOk.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(writeReviewGui.textAreaReview.getText()==null){
					JOptionPane.showMessageDialog(null,"You MUST enter a review");
				}
				else{	
				NewReviewContoller newReviewcontoller=new NewReviewContoller(books.get(selection),user,writeReviewGui.textAreaReview.getText());
				JOptionPane.showMessageDialog(null,"The review sent for checking!");
				writeReviewGui.setVisible(false);
				if(permmision==1)reader_gui.setVisible(true);
				else if(permmision==2)editor_gui.setVisible(true);
				else if(permmision==3)LibrarianGui.
				}
			    
			}
		});
	    ///////////////////////////////////////////
		
	    ////////////////search Book Result///////////
		searchBookResultGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(false);
				searchBookGui.setVisible(true);
			}
		});
	
	    searchBookResultGui.OKButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/////////////////////////////////////////////////////////////////////////
				if((permmision==1)||(permmision==2)){
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				}
				else if(permmision==3){
					add(librarianBookDisplayGui);
					librarianBookDisplayGui.setVisible(true);
				}
				else{
					add(managerBookDisplayGui);
					managerBookDisplayGui.setVisible(true);
				}
				searchBookResultGui.setVisible(false);
				
			}
		});
	    bookDisplayGui.ReadReviewButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				bookDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewDisplayGui);
				reviewDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    reviewDisplayGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(reviewsForBookList);
				reviewDisplayGui.setVisible(false);
				reviewsForBookList.setVisible(true);
			}
		});
	    reviewsForBookList.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(bookDisplayGui);
				bookDisplayGui.setVisible(true);
				reviewsForBookList.setVisible(false);
			}
		});
	    bookDisplayGui.PurchaseButton.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		if(mambership==false){
				add(paymentOptionsGui);
				bookDisplayGui.setVisible(false);
				paymentOptionsGui.setVisible(true);
	    		}
	    		else{
	    			add(chooseFormatGui);
					bookDisplayGui.setVisible(false);
					chooseFormatGui.setVisible(true);
	    		}
			}
		});
	    paymentOptionsGui.btnOk.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(chooseFormatGui);
	    		chooseFormatGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	    paymentOptionsGui.btnBack.addActionListener(new ActionListener(){
	    	@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
	    		add(bookDisplayGui);
	    		bookDisplayGui.setVisible(true);
			     paymentOptionsGui.setVisible(false);
			}
		});
	  
	   ///////////////////////////////////////////
	    
	   //////////////// Book Display ////////////
	    bookDisplayGui.BackButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				searchBookResultGui.setVisible(true);
				bookDisplayGui.setVisible(false);
			}
		} );
       ////////////////////////////////////////
	   ///////////////Editor/////////////////////
	   editor_gui.btnBookSearch.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(searchBookGui);
			editor_gui.setVisible(false);
			searchBookGui.setVisible(true);
		}
	});
	   editor_gui.btnWriteAReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
			books=writeReviewContoller.getBooksList();
			if(books.size()==0)
				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
			else{
			add(bookListToReviewGui);
			bookListToReviewGui.setVisible(true);
			editor_gui.setVisible(false);
			DefaultListModel<String> model = new DefaultListModel<>();
			bookListToReviewGui.BookList.setModel(model);
			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
			}
			
		
		}
	});
	   editor_gui.btnLogout.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
		
			// change in db status of user
			LogoutController logoutController=new LogoutController(user.getId());
			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
			setSize(new Dimension(450,450));
			login_gui.setVisible(true);
			editor_gui.setVisible(false);
			
		} 
	});
	   editor_gui.NotificationButton.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(notificaitonWindowGui);
			notificaitonWindowGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});
       editor_gui.btnCheckReview.addActionListener(new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			add(reviewToCheackGui);
			reviewToCheackGui.setVisible(true);
			editor_gui.setVisible(false);
			
		}
	});	
       ////////////////////////////////////////////////
       /////////////review list to check//////////////
       reviewToCheackGui.btnBack.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			
   			reviewToCheackGui.setVisible(false);
   			if(permmision==2)editor_gui.setVisible(true);
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			
   		}
   	});	
       reviewToCheackGui.btnOk.addActionListener(new ActionListener() {

      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			
      			reviewToCheackGui.setVisible(false);
      			reviewCheckingGui.setVisible(true);
      			add(reviewCheckingGui);
      			
      		}
      	});
       //////////////////////////////////////////////
       ///////review checking///////////////////////
       reviewCheckingGui.btnBack.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			
     			reviewToCheackGui.setVisible(true);
     			reviewCheckingGui.setVisible(false);
     			add(reviewToCheackGui);
     			
     		}
     	});
       ///////////////////////////////////////////////////////////////////
      //////////////////////////librarianGui//////////////////////////////
       librarian_gui.btnBookSearch.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				add(searchBookGui);
				librarian_gui.setVisible(false);
				searchBookGui.setVisible(true);
				
			}
		} );
       librarian_gui.btnWriteAReview.addActionListener(new ActionListener() {
   		
    	   @Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
   			books=writeReviewContoller.getBooksList();
   			if(books.size()==0)
   				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
   			else{
   			add(bookListToReviewGui);
   			bookListToReviewGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			DefaultListModel<String> model = new DefaultListModel<>();
   			bookListToReviewGui.BookList.setModel(model);
   			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
   			}
   			
   		
   		}
   	});
       librarian_gui.btnLogout.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   		
   			// change in db status of user
   			LogoutController logoutController=new LogoutController(user.getId());
   			login_gui.IDtextPane.setText("");
			login_gui.passwordField.setText("");
   			setSize(new Dimension(450,450));
   			login_gui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		} 
   	});
       librarian_gui.NotificationButton.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(notificaitonWindowGui);
   			notificaitonWindowGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
       librarian_gui.btnCheckReview.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(reviewToCheackGui);
   			reviewToCheackGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});	
       librarian_gui.btnAddBook.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(addBookGui);
      			addBookGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});	
       librarian_gui.btnPayReq.addActionListener(new ActionListener() {
     		
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(paymantRequstListGui);
     			paymantRequstListGui.setVisible(true);
     			librarian_gui.setVisible(false);
     			
     		}
     	});
       librarian_gui.btnSigninRequest.addActionListener(new ActionListener() {
    		
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			add(sgininRequsrtListGui);
    			sgininRequsrtListGui.setVisible(true);
    			librarian_gui.setVisible(false);
    			
    		}
    	});
       librarian_gui.btnAddAccount.addActionListener(new ActionListener() {
   		
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			add(addAccuntGui);
   			addAccuntGui.setVisible(true);
   			librarian_gui.setVisible(false);
   			
   		}
   	});
        librarian_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
      		
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(searchAccuntGui);
      			searchAccuntGui.setVisible(true);
      			librarian_gui.setVisible(false);
      			
      		}
      	});
       ///////////////////////book display///////////////////////////////
       librarianBookDisplayGui.BackButton.addActionListener(new ActionListener() {
    		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
    			
    			searchBookResultGui.setVisible(true);
    			librarianBookDisplayGui.setVisible(false);
    			
    			
    		}
    	});
       /////////////////////add book///////////////////////////////////
       addBookGui.BackButton.addActionListener(new ActionListener() {
   		@Override
   		public void actionPerformed(ActionEvent e) {
   			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			addBookGui.setVisible(false);
   			
   			
   			
   		}
       });
       ///////////////////////payment request//////////////////
       paymantRequstListGui.btnBack.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			paymantRequstListGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
       			
       			
       		}
           });
       paymantRequstListGui.btnOk.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(false);
    			add(paymentRequstDisplayGui);
    			paymentRequstDisplayGui.setVisible(true);
     			
     			
     		}
    	
         });
       ///////////////////////payment requst display////////////////////
       paymentRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
    		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
    			paymantRequstListGui.setVisible(true);
    			paymentRequstDisplayGui.setVisible(false);
     			
     			
     		}
    	
         });
       ///////////////sginin request//////////////////
       sgininRequsrtListGui.btnBack.addActionListener(new ActionListener() {
   		@Override
    		public void actionPerformed(ActionEvent e) {
    			// TODO Auto-generated method stub
   			if(permmision==3)librarian_gui.setVisible(true);
   			else libraryManager_gui.setVisible(true);
   			sgininRequsrtListGui.setVisible(false);
    			
    			
    		}
   	
        });
       sgininRequsrtListGui.btnOk.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			sgininRequstDisplayGui.setVisible(true);
      			sgininRequsrtListGui.setVisible(false);
       			add(sgininRequstDisplayGui);
       			
       		}
      	
           });
         ///////////////////////////sginin requst display/////////////
         sgininRequstDisplayGui.btnBack.addActionListener(new ActionListener() {
     		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
     			sgininRequstDisplayGui.setVisible(false);
     			sgininRequsrtListGui.setVisible(true);
      			
      			
      		}
     	
          });
         /////////////////////add Accunt///////////////////////////////
         addAccuntGui.BackButton.addActionListener(new ActionListener() {
      		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
      			addAccuntGui.setVisible(false);
      			if(permmision==3)librarian_gui.setVisible(true);
      			else libraryManager_gui.setVisible(true);
       			
       		}
      	
           });
         ////////////////////////search accunt////////////////////
         searchAccuntGui.btnBack.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3)librarian_gui.setVisible(true);
       			else libraryManager_gui.setVisible(true);
        			
        		}
       	
            });
         searchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(false);
       			if(permmision==3){
       				editAccuntGui.setVisible(true);
       			    add(editAccuntGui);
       			}	
       			else{
       				managerEditAccuntGui.setVisible(true);
       			    add(managerEditAccuntGui);
       			}
        		}
       	
            });
         //////////////////////////////////esit accunt liberian/////////////////
         editAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			editAccuntGui.setVisible(false);
            }});
         
         /////////////////////////////////////library manager/////////////////////////////
         libraryManager_gui.btnBookSearch.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			add(searchBookGui);
       		}
       		}); 
           libraryManager_gui.btnWriteAReview.addActionListener(new ActionListener() {

       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			WriteReviewController writeReviewContoller=new WriteReviewController(user.getId());
       			books=writeReviewContoller.getBooksList();
       			if(books.size()==0)
       				JOptionPane.showMessageDialog(null,"You Dont Have Books To review");
       			else{
       			add(bookListToReviewGui);
       			bookListToReviewGui.setVisible(true);
       			libraryManager_gui.setVisible(false);
       			DefaultListModel<String> model = new DefaultListModel<>();
       			bookListToReviewGui.BookList.setModel(model);
       			for(int i=0;i<books.size();i++)model.addElement(books.get(i).getTitle());
       			}
       			
       		
       		}
       	});
           libraryManager_gui.btnLogout.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   		
       	   			// change in db status of user
       	   		LogoutController logoutController=new LogoutController(user.getId());
       	     	login_gui.IDtextPane.setText("");
			    login_gui.passwordField.setText("");
       	   		setSize(new Dimension(450,450));
       	   		login_gui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		} 
       	   	});
             libraryManager_gui.NotificationButton.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(notificaitonWindowGui);
       	   			notificaitonWindowGui.setVisible(true);
       	   		    libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnCheckReview.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(reviewToCheackGui);
       	   			reviewToCheackGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});	
             libraryManager_gui.btnAddBook.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(addBookGui);
       	      			addBookGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnPayReq.addActionListener(new ActionListener() {
       	     		
       	     		@Override
       	     		public void actionPerformed(ActionEvent e) {
       	     			// TODO Auto-generated method stub
       	     			add(paymantRequstListGui);
       	     			paymantRequstListGui.setVisible(true);
       	     		libraryManager_gui.setVisible(false);
       	     			
       	     		}
       	     	});
             libraryManager_gui.btnSigninRequest.addActionListener(new ActionListener() {
       	    		
       	    		@Override
       	    		public void actionPerformed(ActionEvent e) {
       	    			// TODO Auto-generated method stub
       	    			add(sgininRequsrtListGui);
       	    			sgininRequsrtListGui.setVisible(true);
       	    			libraryManager_gui.setVisible(false);
       	    			
       	    		}
       	    	});
             libraryManager_gui.btnAddAccount.addActionListener(new ActionListener() {
       	   		
       	   		@Override
       	   		public void actionPerformed(ActionEvent e) {
       	   			// TODO Auto-generated method stub
       	   			add(addAccuntGui);
       	   			addAccuntGui.setVisible(true);
       	   		libraryManager_gui.setVisible(false);
       	   			
       	   		}
       	   	});
             libraryManager_gui.btnAcocuntEditor.addActionListener(new ActionListener() {
       	      		
       	      		@Override
       	      		public void actionPerformed(ActionEvent e) {
       	      			// TODO Auto-generated method stub
       	      			add(searchAccuntGui);
       	      			searchAccuntGui.setVisible(true);
       	      		libraryManager_gui.setVisible(false);
       	      			
       	      		}
       	      	});	
             libraryManager_gui.btnGetReport.addActionListener(new ActionListener() {
    	      		
    	      		@Override
    	      		public void actionPerformed(ActionEvent e) {
    	      			// TODO Auto-generated method stub
    	      			add(reportManuGui);
    	      			reportManuGui.setVisible(true);
    	      		libraryManager_gui.setVisible(false);
    	      			
    	      		}
    	      	});	
          
         /////////////////manager book display gui////////////////////////////
         managerBookDisplayGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchBookResultGui.setVisible(true);
       			managerBookDisplayGui.setVisible(false);
       		}
       		});	
         /////////////////////manager edit accunt gui///////////////////
         managerEditAccuntGui.BackButton.addActionListener(new ActionListener() {
       		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
       			searchAccuntGui.setVisible(true);
       			managerEditAccuntGui.setVisible(false);
       			add(searchAccuntGui);
       		}
       		});	
         /////////////report manu///////////////////
         reportManuGui.btnBack.addActionListener(new ActionListener() {
        		@Override
         		public void actionPerformed(ActionEvent e) {
         			// TODO Auto-generated method stub
        			libraryManager_gui.setVisible(true);
        			reportManuGui.setVisible(false);
        		}
        		});	
         reportManuGui.btnReportByBook.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			add(reportSearchBookGui);
     			reportSearchBookGui.setVisible(true);
    			reportManuGui.setVisible(false);
    		}
    		});	
         reportManuGui.btnReportByReader.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			add(reportSearchAccuntGui);
      			reportSearchAccuntGui.setVisible(true);
     			reportManuGui.setVisible(false);
     		}
     		});		
         ////////////////////////////report by reader////////////////////////
         reportSearchAccuntGui.btnSearch.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			add(reportDisplayReaderGui);
       			reportDisplayReaderGui.setVisible(true);
       			reportSearchAccuntGui.setVisible(false);
      		}
      		});		
         reportSearchAccuntGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        			reportManuGui.setVisible(true);
        			reportSearchAccuntGui.setVisible(false);  
        		}
         });
         /////////////////////////////report reader Display/////////////////////////
         reportDisplayReaderGui.btnBack.addActionListener(new ActionListener() {
        		@Override
        		public void actionPerformed(ActionEvent e) {
        			// TODO Auto-generated method stub
        		
        			reportDisplayReaderGui.setVisible(false);
        			reportSearchAccuntGui.setVisible(true);
       		}
       		});		
         ////////////////report by book ////////////////////
         reportSearchBookGui.BackButton.addActionListener(new ActionListener() {
     		@Override
     		public void actionPerformed(ActionEvent e) {
     			// TODO Auto-generated method stub
     			reportManuGui.setVisible(true);
     			reportSearchBookGui.setVisible(false);  
     		}
      });
         reportSearchBookGui.SearchbtnNewButton.addActionListener(new ActionListener() {
      		@Override
      		public void actionPerformed(ActionEvent e) {
      			// TODO Auto-generated method stub
      			reportSearchBookResultGui.setVisible(true);
      			reportSearchBookGui.setVisible(false);  
      			add(reportSearchBookResultGui);
      		}
       });
         /////////////////////////////report search book result//////////////////
         reportSearchBookResultGui.BackButton.addActionListener(new ActionListener() {
       		@Override
       		public void actionPerformed(ActionEvent e) {
       			// TODO Auto-generated method stub
       			reportSearchBookResultGui.setVisible(false);
       			reportSearchBookGui.setVisible(true);  
       			
       		}
        });
         reportSearchBookResultGui.OKButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
           			reportSearchBookResultGui.setVisible(false);
           			reportBookDisplayGui.setVisible(true);
           			add(reportBookDisplayGui);
           			
           		}
            });
         /////////////////report book display///////////////////
         reportBookDisplayGui.BackButton.addActionListener(new ActionListener() {
        		@Override
           		public void actionPerformed(ActionEvent e) {
           			// TODO Auto-generated method stub
        			reportBookDisplayGui.setVisible(false);
        			reportSearchBookResultGui.setVisible(true);  
           			
           		}
            });
         
	}
      
	
	
	private void openPanelByjob()
	{
		int flag_check_user=0;  
		System.out.println(user.getstatus_blocked());
		if(user.getstatus_blocked().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user account is blocked");
			flag_check_user=1;
		}
		else if(user.getlogin().compareTo("1")==0)
		{
			JOptionPane.showMessageDialog(null,"The user is allready connect from other devise ");
			flag_check_user=1;
		}
	    
		if(flag_check_user==0)
		{
		switch(user.getPrmission())
		{
		case "1":                 //Reader
		{
			add(reader_gui);
			reader_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			reader_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "2":                    //Editor
		{
			add(editor_gui);
			editor_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			editor_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;	
		}
		case "3":                   //Librarian
		{   
			add(librarian_gui);
			librarian_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			librarian_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		case "4":  
		{                              //Library Manager
			add(libraryManager_gui);
			libraryManager_gui.setVisible(true);
			login_gui.setVisible(false);
			setSize(new Dimension(750, 650));
			libraryManager_gui.lblHi.setText("Hi! "+user.getFirstName()+" "+user.getLastName());
		break;
		}
		default:
		{
			JOptionPane.showMessageDialog(null,"The ID or the PASSWORD are incorrct");
		}
		
		
		}
		}
	}
	
	private void copyUser(User u)
	{
		System.out.println("1   "+u.toString());
		user.setId(u.getId());
		user.setFirstName(u.getFirstName());
		user.setLastName(u.getLastName());
		user.setEmail(u.getEmail());
		user.setpass(u.getpass());
		user.setCreditCardNum(u.getCreditCardNum());
		user.setlogin(u.getlogin());
		user.setPrmission(u.getPrmission());
		user.setaccout_type(u.getaccout_type());
		user.setstatus_blocked(u.getstatus_blocked());
		System.out.println("2   "+user.toString());
		
	}
	
}



	
	
	
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:292)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1209)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
